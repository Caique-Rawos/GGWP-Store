<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        f3/8/n8//P//P/z+fz/8/n8///5///////8=
</value>
  </data>
</root>